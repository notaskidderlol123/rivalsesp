local camera = game.Workspace.CurrentCamera
local players = game:GetService("Players")
local localPlayer = players.LocalPlayer
local runService = game:GetService("RunService")

-- New Box and Bone ESP function
local function DrawESP(plr)
    local Box = Drawing.new("Quad")
    Box.Visible = false
    Box.Color = Color3.fromRGB(255, 255, 255)
    Box.Thickness = 1
    Box.Transparency = 1

    local name = Drawing.new("Text")
    name.Size = 18
    name.Color = Color3.fromRGB(255, 255, 255)
    name.Outline = true
    name.Visible = false

    local distance = Drawing.new("Text")
    distance.Size = 16
    distance.Color = Color3.fromRGB(255, 255, 255)
    distance.Outline = true
    distance.Visible = false

    local healthBar = Drawing.new("Line")
    healthBar.Thickness = 3
    healthBar.Visible = false

    local tracer = Drawing.new("Line")
    tracer.Color = Color3.fromRGB(0, 255, 0)
    tracer.Thickness = 1
    tracer.Visible = false

    local bones = {
        Head = "UpperTorso", UpperTorso = "LowerTorso", 
        LeftUpperArm = "LeftLowerArm", LeftLowerArm = "LeftHand",
        RightUpperArm = "RightLowerArm", RightLowerArm = "RightHand",
        LeftUpperLeg = "LeftLowerLeg", LeftLowerLeg = "LeftFoot",
        RightUpperLeg = "RightLowerLeg", RightLowerLeg = "RightFoot"
    }

    local skeleton = {}
    for bone, _ in pairs(bones) do
        local line = Drawing.new("Line")
        line.Color = Color3.fromRGB(255, 165, 0)
        line.Thickness = 2
        line.Visible = false
        skeleton[bone] = line
    end

    local function Update()
        local c
        c = runService.RenderStepped:Connect(function()
            if plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") and plr.Character:FindFirstChildOfClass("Humanoid").Health > 0 then
                local pos, vis = camera:WorldToViewportPoint(plr.Character.HumanoidRootPart.Position)
                if vis then 
                    local rootPos = camera:WorldToViewportPoint(plr.Character.HumanoidRootPart.Position)
                    local headPos = camera:WorldToViewportPoint(plr.Character.Head.Position)
                    local bottomPos = camera:WorldToViewportPoint((plr.Character.HumanoidRootPart.CFrame * CFrame.new(0, -3, 0)).p)
                    
                    Box.PointA = Vector2.new(rootPos.X - 30, headPos.Y)
                    Box.PointB = Vector2.new(rootPos.X + 30, headPos.Y)
                    Box.PointC = Vector2.new(rootPos.X + 30, bottomPos.Y)
                    Box.PointD = Vector2.new(rootPos.X - 30, bottomPos.Y)
                    Box.Visible = true

                    name.Position = Vector2.new(rootPos.X, headPos.Y - 20)
                    name.Text = plr.Name
                    name.Visible = true

                    local playerDistance = (localPlayer.Character.HumanoidRootPart.Position - plr.Character.HumanoidRootPart.Position).Magnitude
                    distance.Position = Vector2.new(rootPos.X, bottomPos.Y + 5)
                    distance.Text = tostring(math.floor(playerDistance)) .. "m"
                    distance.Visible = true

                    local humanoid = plr.Character:FindFirstChildOfClass("Humanoid")
                    if humanoid then
                        local healthPercent = humanoid.Health / humanoid.MaxHealth
                        healthBar.From = Vector2.new(rootPos.X - 35, headPos.Y)
                        healthBar.To = Vector2.new(rootPos.X - 35, headPos.Y + (bottomPos.Y - headPos.Y) * (1 - healthPercent))
                        healthBar.Color = Color3.fromRGB(0, 255, 0)
                        healthBar.Visible = true
                    end

                    tracer.From = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y)
                    tracer.To = Vector2.new(rootPos.X, rootPos.Y)
                    tracer.Visible = true

                    for bone, connection in pairs(bones) do
                        local start = plr.Character:FindFirstChild(bone)
                        local endPart = plr.Character:FindFirstChild(connection)
                        if start and endPart then
                            local startPos, startVis = camera:WorldToViewportPoint(start.Position)
                            local endPos, endVis = camera:WorldToViewportPoint(endPart.Position)
                            if startVis and endVis then
                                skeleton[bone].From = Vector2.new(startPos.X, startPos.Y)
                                skeleton[bone].To = Vector2.new(endPos.X, endPos.Y)
                                skeleton[bone].Visible = true
                            else
                                skeleton[bone].Visible = false
                            end
                        end
                    end
                else
                    Box.Visible = false
                    name.Visible = false
                    distance.Visible = false
                    healthBar.Visible = false
                    tracer.Visible = false
                    for _, line in pairs(skeleton) do
                        line.Visible = false
                    end
                end
            else
                Box.Visible = false
                name.Visible = false
                distance.Visible = false
                healthBar.Visible = false
                tracer.Visible = false
                for _, line in pairs(skeleton) do
                    line.Visible = false
                end
                if not game.Players:FindFirstChild(plr.Name) then
                    c:Disconnect()
                end
            end
        end)
    end
    coroutine.wrap(Update)()
end

-- Function to create all ESP features for a player
local function createESP(player)
    if player == localPlayer then return end
    DrawESP(player)
end

-- Apply ESP to all players
for _, player in pairs(players:GetPlayers()) do
    if player ~= localPlayer then
        createESP(player)
    end
end

-- Apply ESP to new players joining
players.PlayerAdded:Connect(function(player)
    wait(1)
    createESP(player)
end)
